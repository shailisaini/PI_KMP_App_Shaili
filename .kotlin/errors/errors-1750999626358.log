kotlin version: 2.0.0
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: D:/Shaili/Projects/PI/PI_New/PI_KMP_App_Shaili/shared/src/androidMain/kotlin/com/pi/ProjectInclusion/constants/BackHandler.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:50)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:29)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:16)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:241)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:140)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:155)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:50)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:104)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:48)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:453)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:62)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:676)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1661)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:BackHandler visibility:public modality:FINAL <> (enabled:kotlin.Boolean, onBack:kotlin.Function0<kotlin.Unit>) returnType:kotlin.Unit
  annotations:
    Composable
  VALUE_PARAMETER name:enabled index:0 type:kotlin.Boolean
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.Boolean
  VALUE_PARAMETER name:onBack index:1 type:kotlin.Function0<kotlin.Unit>
  BLOCK_BODY
    VAR PROPERTY_DELEGATE name:currentOnBack$delegate type:androidx.compose.runtime.State<kotlin.Function0<kotlin.Unit>> [val]
      CALL 'public final fun rememberUpdatedState <T> (newValue: T of androidx.compose.runtime.SnapshotStateKt.rememberUpdatedState): androidx.compose.runtime.State<T of androidx.compose.runtime.SnapshotStateKt.rememberUpdatedState> declared in androidx.compose.runtime.SnapshotStateKt' type=androidx.compose.runtime.State<kotlin.Function0<kotlin.Unit>> origin=null
        <T>: kotlin.Function0<kotlin.Unit>
        newValue: GET_VAR 'onBack: kotlin.Function0<kotlin.Unit> declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=kotlin.Function0<kotlin.Unit> origin=null
    VAR name:backCallback type:com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> [val]
      CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> origin=null
        <T>: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>
        calculation: BLOCK type=kotlin.Function0<com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun BackHandler$lambda$1 ($enabled: kotlin.Boolean, $currentOnBack$delegate: androidx.compose.runtime.State<kotlin.Function0<kotlin.Unit>>): com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> declared in com.pi.ProjectInclusion.constants.BackHandlerKt' type=kotlin.Function0<com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>> origin=INLINE_LAMBDA reflectionTarget=null
            $enabled: GET_VAR 'enabled: kotlin.Boolean declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=kotlin.Boolean origin=null
            $currentOnBack$delegate: GET_VAR 'val currentOnBack$delegate: androidx.compose.runtime.State<kotlin.Function0<kotlin.Unit>> [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=androidx.compose.runtime.State<kotlin.Function0<kotlin.Unit>> origin=null
    CALL 'public final fun SideEffect (effect: kotlin.Function0<kotlin.Unit>): kotlin.Unit declared in androidx.compose.runtime.EffectsKt' type=kotlin.Unit origin=null
      effect: BLOCK type=kotlin.Function0<kotlin.Unit> origin=LAMBDA
        COMPOSITE type=kotlin.Unit origin=null
        CALL 'public final fun <jvm-indy> <T> (dynamicCall: T of kotlin.jvm.internal.<jvm-indy>, bootstrapMethodHandle: kotlin.Any, vararg bootstrapMethodArguments: kotlin.Any): T of kotlin.jvm.internal.<jvm-indy> declared in kotlin.jvm.internal' type=kotlin.Function0<kotlin.Unit> origin=null
          <T>: kotlin.Function0<kotlin.Unit>
          dynamicCall: CALL 'public final fun invoke (p0: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>, p1: kotlin.Boolean): kotlin.Function0<kotlin.Unit> declared in kotlin.jvm.internal.invokeDynamic' type=kotlin.Function0<kotlin.Unit> origin=null
            p0: GET_VAR 'val backCallback: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> origin=null
            p1: GET_VAR 'enabled: kotlin.Boolean declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=kotlin.Boolean origin=null
          bootstrapMethodHandle: CALL 'public final fun <jvm-method-handle> (tag: kotlin.Int, owner: kotlin.String, name: kotlin.String, descriptor: kotlin.String, isInterface: kotlin.Boolean): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
            tag: CONST Int type=kotlin.Int value=6
            owner: CONST String type=kotlin.String value="java/lang/invoke/LambdaMetafactory"
            name: CONST String type=kotlin.String value="metafactory"
            descriptor: CONST String type=kotlin.String value="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
            isInterface: CONST Boolean type=kotlin.Boolean value=false
          bootstrapMethodArguments: VARARG type=kotlin.Array<kotlin.Any> varargElementType=kotlin.Any
            CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
              method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): R of kotlin.Function0 [operator] declared in kotlin.Function0' type=kotlin.Any
            RAW_FUNCTION_REFERENCE 'private final fun BackHandler$lambda$2 ($backCallback: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>, $enabled: kotlin.Boolean): kotlin.Unit? declared in com.pi.ProjectInclusion.constants.BackHandlerKt' type=kotlin.Any
            CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
              method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): kotlin.Unit? [fake_override,operator] declared in kotlin.jvm.internal.invokeDynamic.<fake>' type=kotlin.Any
    VAR name:backDispatcher type:androidx.activity.OnBackPressedDispatcher [val]
      CALL 'public abstract fun <get-onBackPressedDispatcher> (): androidx.activity.OnBackPressedDispatcher declared in androidx.activity.OnBackPressedDispatcherOwner' type=androidx.activity.OnBackPressedDispatcher origin=GET_PROPERTY
        $this: CALL 'public final fun checkNotNull <T> (value: T of kotlin.PreconditionsKt.checkNotNull?, lazyMessage: kotlin.Function0<kotlin.Any>): T of kotlin.PreconditionsKt.checkNotNull [inline] declared in kotlin.PreconditionsKt' type=androidx.activity.OnBackPressedDispatcherOwner origin=null
          <T>: androidx.activity.OnBackPressedDispatcherOwner
          value: CALL 'public final fun <get-current> (): androidx.activity.OnBackPressedDispatcherOwner? declared in androidx.activity.compose.LocalOnBackPressedDispatcherOwner' type=androidx.activity.OnBackPressedDispatcherOwner? origin=GET_PROPERTY
            $this: GET_FIELD 'FIELD FIELD_FOR_OBJECT_INSTANCE name:INSTANCE type:androidx.activity.compose.LocalOnBackPressedDispatcherOwner visibility:public [final,static]' type=androidx.activity.compose.LocalOnBackPressedDispatcherOwner origin=null
          lazyMessage: BLOCK type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            COMPOSITE type=kotlin.Unit origin=null
            FUNCTION_REFERENCE 'private final fun BackHandler$lambda$3 (): kotlin.Any declared in com.pi.ProjectInclusion.constants.BackHandlerKt' type=kotlin.Function0<kotlin.Any> origin=INLINE_LAMBDA reflectionTarget=null
    VAR name:lifecycleOwner type:androidx.lifecycle.LifecycleOwner [val]
      CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=androidx.lifecycle.LifecycleOwner origin=GET_PROPERTY
        $this: TYPE_OP type=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal>
          CALL 'public final fun <get-LocalLifecycleOwner> (): androidx.compose.runtime.ProvidableCompositionLocal<androidx.lifecycle.LifecycleOwner> declared in androidx.lifecycle.compose.LocalLifecycleOwnerKt' type=androidx.compose.runtime.ProvidableCompositionLocal<androidx.lifecycle.LifecycleOwner> origin=GET_PROPERTY
    CALL 'public final fun DisposableEffect (key1: kotlin.Any?, key2: kotlin.Any?, effect: @[ExtensionFunctionType] kotlin.Function1<androidx.compose.runtime.DisposableEffectScope, androidx.compose.runtime.DisposableEffectResult>): kotlin.Unit declared in androidx.compose.runtime.EffectsKt' type=kotlin.Unit origin=null
      key1: GET_VAR 'val lifecycleOwner: androidx.lifecycle.LifecycleOwner [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=androidx.lifecycle.LifecycleOwner origin=null
      key2: GET_VAR 'val backDispatcher: androidx.activity.OnBackPressedDispatcher [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=androidx.activity.OnBackPressedDispatcher origin=null
      effect: BLOCK type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.runtime.DisposableEffectScope, androidx.compose.runtime.DisposableEffectResult> origin=LAMBDA
        COMPOSITE type=kotlin.Unit origin=null
        CALL 'public final fun <jvm-indy> <T> (dynamicCall: T of kotlin.jvm.internal.<jvm-indy>, bootstrapMethodHandle: kotlin.Any, vararg bootstrapMethodArguments: kotlin.Any): T of kotlin.jvm.internal.<jvm-indy> declared in kotlin.jvm.internal' type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.runtime.DisposableEffectScope, androidx.compose.runtime.DisposableEffectResult> origin=null
          <T>: @[ExtensionFunctionType] kotlin.Function1<androidx.compose.runtime.DisposableEffectScope, androidx.compose.runtime.DisposableEffectResult>
          dynamicCall: CALL 'public final fun invoke (p0: androidx.activity.OnBackPressedDispatcher, p1: androidx.lifecycle.LifecycleOwner, p2: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>): @[ExtensionFunctionType] kotlin.Function1<androidx.compose.runtime.DisposableEffectScope, androidx.compose.runtime.DisposableEffectResult> declared in kotlin.jvm.internal.invokeDynamic' type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.runtime.DisposableEffectScope, androidx.compose.runtime.DisposableEffectResult> origin=null
            p0: GET_VAR 'val backDispatcher: androidx.activity.OnBackPressedDispatcher [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=androidx.activity.OnBackPressedDispatcher origin=null
            p1: GET_VAR 'val lifecycleOwner: androidx.lifecycle.LifecycleOwner [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=androidx.lifecycle.LifecycleOwner origin=null
            p2: GET_VAR 'val backCallback: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> [val] declared in com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler' type=com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> origin=null
          bootstrapMethodHandle: CALL 'public final fun <jvm-method-handle> (tag: kotlin.Int, owner: kotlin.String, name: kotlin.String, descriptor: kotlin.String, isInterface: kotlin.Boolean): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
            tag: CONST Int type=kotlin.Int value=6
            owner: CONST String type=kotlin.String value="java/lang/invoke/LambdaMetafactory"
            name: CONST String type=kotlin.String value="metafactory"
            descriptor: CONST String type=kotlin.String value="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
            isInterface: CONST Boolean type=kotlin.Boolean value=false
          bootstrapMethodArguments: VARARG type=kotlin.Array<kotlin.Any> varargElementType=kotlin.Any
            CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
              method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (p1: P1 of kotlin.Function1): R of kotlin.Function1 [operator] declared in kotlin.Function1' type=kotlin.Any
            RAW_FUNCTION_REFERENCE 'private final fun BackHandler$lambda$5 ($backDispatcher: androidx.activity.OnBackPressedDispatcher, $lifecycleOwner: androidx.lifecycle.LifecycleOwner, $backCallback: com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided>, $this$DisposableEffect: androidx.compose.runtime.DisposableEffectScope): androidx.compose.runtime.DisposableEffectResult declared in com.pi.ProjectInclusion.constants.BackHandlerKt' type=kotlin.Any
            CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
              method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (p1: androidx.compose.runtime.DisposableEffectScope): androidx.compose.runtime.DisposableEffectResult [fake_override,operator] declared in kotlin.jvm.internal.invokeDynamic.<fake>' type=kotlin.Any

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:50)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:42)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:385)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:402)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:169)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:41)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt.makeIrFilePhase$lambda$5(PhaseBuilders.kt:114)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 45 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=com.pi.ProjectInclusion.constants.BackHandlerKt.BackHandler$lambda$1.<no name provided> origin=null
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:162)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:647)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:784)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:573)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:578)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:239)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:121)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:46)
	... 55 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/compose/runtime/ComposablesKt;.remember(Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:96)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:91)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:43)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:51)
	... 70 more


